# version: '3.8'

services:

  # PostgreSQL
  postgres:
    image: postgres:17-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  # Zookeeper для Kafka от Bitnami
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app-network

  # Kafka от Bitnami
  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    command: |
      sh -c "
      # Запускаем стандартный скрипт
      /opt/bitnami/scripts/kafka/run.sh &
      PID=$!

      # Ждем готовности Kafka
      until kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1; do
          sleep 2
      done

      # Создаем топики
      kafka-topics.sh --bootstrap-server localhost:9092 --create --topic post_order --partitions 1 --replication-factor 1 --if-not-exists
      kafka-topics.sh --bootstrap-server localhost:9092 --create --topic post_order_response --partitions 1 --replication-factor 1 --if-not-exists
      kafka-topics.sh --bootstrap-server localhost:9092 --create --topic get_order_by_id --partitions 1 --replication-factor 1 --if-not-exists
      kafka-topics.sh --bootstrap-server localhost:9092 --create --topic get_order_by_id_response --partitions 1 --replication-factor 1 --if-not-exists

      echo 'Топики созданы, ожидаем завершения Kafka...'
      wait $PID
      "
    networks:
      - app-network

  # Backend сервер (из cmd/server/)
  server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
    volumes:
      - ./frontend:/app/frontend
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Worker сервис (из cmd/service/)
  service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: message-processor
      KAFKA_TOPIC: messages
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
  # Сети
networks:
  app-network:
    driver: bridge

# Тома для данных
volumes:
  postgres_data:
